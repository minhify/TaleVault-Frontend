import * as vue_demi from 'vue-demi';
import { QueryClient as QueryClient$1, QueryClientConfig, QueryFilters, MutationFilters, QueryKey, Updater, SetDataOptions, DefaultError, QueryState, ResetOptions, CancelOptions, InvalidateQueryFilters, InvalidateOptions, RefetchQueryFilters, RefetchOptions, FetchQueryOptions, FetchInfiniteQueryOptions, InfiniteData, DefaultOptions, QueryObserverOptions, MutationKey, MutationObserverOptions } from '@tanstack/query-core';
import { MaybeRefDeep } from './types.js';

declare class QueryClient extends QueryClient$1 {
    constructor(config?: QueryClientConfig);
    isRestoring: vue_demi.Ref<boolean>;
    isFetching(filters?: MaybeRefDeep<QueryFilters>): number;
    isMutating(filters?: MaybeRefDeep<MutationFilters>): number;
    getQueryData<TData = unknown>(queryKey: MaybeRefDeep<QueryKey>): TData | undefined;
    getQueriesData<TData = unknown>(filters: MaybeRefDeep<QueryFilters>): Array<[QueryKey, TData | undefined]>;
    setQueryData<TData>(queryKey: MaybeRefDeep<QueryKey>, updater: Updater<TData | undefined, TData | undefined>, options?: MaybeRefDeep<SetDataOptions>): TData | undefined;
    setQueriesData<TData>(filters: MaybeRefDeep<QueryFilters>, updater: Updater<TData | undefined, TData | undefined>, options?: MaybeRefDeep<SetDataOptions>): Array<[QueryKey, TData | undefined]>;
    getQueryState<TData = unknown, TError = DefaultError>(queryKey: MaybeRefDeep<QueryKey>): QueryState<TData, TError> | undefined;
    removeQueries(filters?: MaybeRefDeep<QueryFilters>): void;
    resetQueries(filters?: MaybeRefDeep<QueryFilters>, options?: MaybeRefDeep<ResetOptions>): Promise<void>;
    cancelQueries(filters?: MaybeRefDeep<QueryFilters>, options?: MaybeRefDeep<CancelOptions>): Promise<void>;
    invalidateQueries(filters?: MaybeRefDeep<InvalidateQueryFilters>, options?: MaybeRefDeep<InvalidateOptions>): Promise<void>;
    refetchQueries(filters?: MaybeRefDeep<RefetchQueryFilters>, options?: MaybeRefDeep<RefetchOptions>): Promise<void>;
    fetchQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = never>(options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>): Promise<TData>;
    prefetchQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>): Promise<void>;
    fetchInfiniteQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>): Promise<InfiniteData<TData, TPageParam>>;
    prefetchInfiniteQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>): Promise<void>;
    setDefaultOptions(options: MaybeRefDeep<DefaultOptions>): void;
    setQueryDefaults(queryKey: MaybeRefDeep<QueryKey>, options: MaybeRefDeep<Omit<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>>): void;
    getQueryDefaults(queryKey: MaybeRefDeep<QueryKey>): QueryObserverOptions<any, any, any, any, any>;
    setMutationDefaults(mutationKey: MaybeRefDeep<MutationKey>, options: MaybeRefDeep<MutationObserverOptions<any, any, any, any>>): void;
    getMutationDefaults(mutationKey: MaybeRefDeep<MutationKey>): MutationObserverOptions<any, any, any, any>;
}

export { QueryClient };
